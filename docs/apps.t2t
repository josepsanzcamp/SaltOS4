Applications Documentation
SaltOS 4.0 r1681
January 2025



+Common+

++Matrix functions++

```
apps/common/php/matrix.php
```

This file contain all functions needed by the excel widget


+++TODO+++

```
function make_matrix_version($app, $id)
```

TODO


+Dashboard+

++Dashboard application++

```
apps/dashboard/js/dashboard.js
```

This application implements the tipical features associated to dashboard


+++Main object+++

```
saltos.dashboard = {};
```

This object contains all SaltOS code


+++TODO+++

```
saltos.dashboard.init = arg
```

TODO


+++TODO+++

```
saltos.dashboard.authupdate = ()
```

TODO


+Emails+

++Email application++

```
apps/emails/js/driver.js
```

This application implements the tipical features associated to emails


+++Driver emails object+++

```
saltos.driver.__types.emails = {};
```

This object stores the functions used by the emails driver


+++TODO+++

```
saltos.driver.__types.emails.template = arg
```

TODO


+++TODO+++

```
saltos.driver.__types.emails.init = saltos.driver.__types.type5.init;
```

TODO


++Email application++

```
apps/emails/js/emails.js
```

This application implements the tipical features associated to emails


+++Main object+++

```
saltos.emails = {};
```

This object contains all SaltOS code


+++TODO+++

```
saltos.emails.init = arg
```

TODO


+++TODO+++

```
saltos.emails.server = ()
```

TODO


+++TODO+++

```
saltos.emails.delete1 = ()
```

TODO


+++TODO+++

```
saltos.emails.delete2 = ()
```

TODO


+++TODO+++

```
saltos.emails.send = ()
```

TODO


+++TODO+++

```
saltos.emails.setter = what
```

TODO


+++TODO+++

```
saltos.emails.signature = ()
```

TODO


+++TODO+++

```
saltos.emails.viewpdf = ()
```

TODO


+++TODO+++

```
saltos.emails.download = ()
```

TODO


++TODO++

```
apps/emails/php/filter.php
```

TODO


+++TODO+++

```
function make_where_query_emails($json)
```

TODO


++Get email library++

```
apps/emails/php/getmail.php
```

This library provides the necesary functions to download, parse and manage emails.


+++Requires section+++

```
require_once 'apps/emails/lib/mimeparser/mime_parser.php';
```

This requires loads the external libraries needed to run this library.


+++Defines section+++

```
// phpcs:disable Generic.Files.LineLength
```

This defines allow to define some useful standards to do html pages and more.


+++Remove all body+++

```
function __getmail_removebody($array)
```

This function removes the body entry in the array, it is only for debug purposes

- @aarray => The array that you want to process


+++Process message+++

```
function __getmail_processmessage($disp, $type)
```

This function returns a boolean that identify if the disposition and the type
allow the node to be processed.

- @disp => disposition, can be inline or attachment
- @type => type, can be message, html or plain


+++Process plain html+++

```
function __getmail_processplainhtml($disp, $type)
```

This function returns a boolean that identify if the disposition and the type
allow the node to be processed.

- @disp => disposition, can be inline or attachment
- @type => type, can be message, html or plain


+++Process file+++

```
function __getmail_processfile($disp, $type)
```

This function returns a boolean that identify if the disposition and the type
allow the node to be processed.

- @disp => disposition, can be inline or attachment
- @type => type, can be message, html or plain


+++Check permissions+++

```
function __getmail_checkperm($id)
```

This function allow to check if the current user has permissions to view the
message identified by the id argument

- @id => id of the email


+++Get source+++

```
function __getmail_getsource($id, $max = 0)
```

This function returns the original RFC822 message as string

- @id  => id of the email
- @max => max size that can be processed


+++Mime decode protected+++

```
function __getmail_mime_decode_protected($input)
```

This function decodes the input string that contains the RFC822 message
using the mime_parser_class to do it, and returns the decoded array.

- @input => the RFC822 string that contains the message


+++Get mime+++

```
function __getmail_getmime($id)
```

This function returns the decoded array of the email identified by the id
argument, to do this more optimal, this function uses an internal cache
file to improve the performance for repeated executions.

- @id => id of the email


+++Get Node+++

```
function __getmail_getnode($path, $array)
```

This function returns the node using a xpath notation

- @path  => xpath that identify the desired path that must to be returned
- @array => the decoded message in an array format


+++Get type+++

```
function __getmail_gettype($array)
```

This function tries to unify the differents content-type to standarize it into
the follow formats: html, plain, messsage, alternative, multipart or other.

- @array => the decoded message in an array format


+++Get disposition+++

```
function __getmail_getdisposition($array)
```

This function tries to unify the differents content-dispoaition to standarize
it into the follow formats: attachment, inline or other.

- @array => the decoded message in an array format


+++Get files+++

```
function __getmail_getfiles($array, $level = 0)
```

This function returns an array with the attachment files of the message

- @array => the decoded message in an array format
- @level => this parameter is internally used to detect recursion


+++Get human size+++

```
function __getmail_gethumansize($size)
```

This function returns an string containing the size in human format

- @size => the number of bytes to convert to human format


+++Get info+++

```
function __getmail_getinfo($array)
```

Returns all information of the decoded message in a structured format

- @array => the decoded message in an array format


+++Fix string+++

```
function __getmail_fixstring($arg)
```

This function is a helper used by all functions that pcoesses the headers
of the decoded message.

- @arg => the string that must to be checked and fixed if needed


+++Get text body+++

```
function __getmail_gettextbody($array, $level = 0)
```

This function returns all text body concatenated as an unique string

- @array => the decoded message in an array format
- @level => this parameter is internally used to detect recursion


+++Get full body+++

```
function __getmail_getfullbody($array)
```

This function returns all body and attachments information as an array

- @array => the decoded message in an array format


+++Get cid+++

```
function __getmail_getcid($array, $hash)
```

This function returns the requested attachment indentified by the hash argument

- @array => the decoded message in an array format
- @hash  => the hash of the content requested


+++Insert+++

```
function __getmail_insert(
```

This function do the insert in the app_emails table, and

- @file          => the gzfile that contains the message in RFC822 format
- @messageid     => the id of the message (account_id/uidl)
- @state_new     => the 0/1 that sets the state new flag
- @state_reply   => the 0/1 that sets the state reply flag
- @state_forward => the 0/1 that sets the state forward flag
- @state_wait    => the 0/1 that sets the state wait flag
- @id_correo     => the id of the related email (used to create relations between emails)
- @is_outbox     => the 0/1 that sets the is outbox flag
- @state_sent    => the 0/1 that sets the state sent flag
- @state_error   => the string that contains the error (if exists an error)


+++Update+++

```
function __getmail_update($field, $value, $id)
```

This function updates the field with the value of the app_emails for the
register identified by the id argument.

- @field => field that you want to update
- @value => value that you want to set
- @id    => id of the register to do the update


+++Add bcc+++

```
function __getmail_add_bcc($id, $bcc)
```

This function adds the bbc to the database, this is because the messages
does not contains the bcc field (is hidden in theory), and only is available
if the current execution is the sender of the message.

- @id  => id of the email
- @bcc => an array with the addresses of the emails


+++Gzfile size+++

```
function gzfilesize($filename)
```

This function is copied from http://php.net/manual/es/function.gzread.php#110078
and allow to know the file size of the file after a gzip descompression.

- @filename => the gzip filename that you want to know the size


+++Get email body+++

```
function getmail_body($id, $images = false)
```

This function returns the string that contains the body of the email
intended to be rendered in an iframe, for example

- @id => id of the email


+++TODO+++

```
function __getmail_head_helper($decoded, $email_id)
```

TODO


+++TODO+++

```
function __getmail_body_helper($decoded, $images = false)
```

TODO


+++Get email source+++

```
function getmail_source($id)
```

This function returns the string that contains the source of the email
intended to be rendered in an iframe, for example

- @id => id of the email


+++Get email files+++

```
function getmail_files($id)
```

This function returns an arryy that contains the files of the email
intended to be rendered in an table, for example

- @id => id of the email


+++Get cid+++

```
function getmail_cid($id, $cid)
```

This function returns the requested attachment indentified by the cid argument

- @id  => id of the email
- @cid => the cid of the content requested


+++Is outbox+++

```
function getmail_field($field, $id)
```

Returns the field of the email identified by the id argument

- @field => field requested
- @id    => id of the email


+++Server+++

```
function getmail_server()
```

This function implements the old getmail action of the old saltos.


+++Delete+++

```
function getmail_delete($ids)
```

This function implements the old delete action of the old saltos.

- @ids => array with the emails id


+++Get viewpdf+++

```
function getmail_viewpdf($id, $cid)
```

This function returns the requested attachment indentified by the cid argument
in a pdf format for the viewpdf widget

- @id  => id of the email
- @cid => the cid of the content requested


+++Get download+++

```
function getmail_download($id, $cid)
```

This function returns the requested attachment indentified by the cid argument
in an array format for the download feature

- @id  => id of the email
- @cid => the cid of the content requested


+++TODO+++

```
function getmail_setter($ids, $what)
```

TODO


+++TODO+++

```
function getmail_pdf($ids)
```

TODO


+++TODO+++

```
function __iframe_srcdoc_helper($html)
```

TODO


++Make indexing action++

```
apps/emails/php/indexing.php
```

This fie contains useful functions related to the indexing action that internally uses the
mroonga engine to search in the fulltext string generated by this action


++Send email library++

```
apps/emails/php/sendmail.php
```

This library provides the necesary functions to send emails.


+++Used libraries+++

```
use PHPMailer\PHPMailer\PHPMailer;
```

This use loads the external libraries needed to run this library.


+++Sendmail+++

```
function sendmail($account_id, $to, $subject, $body, $files = '', $async = true)
```

This function send an email in synchronous and/or asynchronous mode

$account_id => the account id used to detect the source of the email
$to         => can be an string with the destination email or an array with
               the follow prefixes => to:, cc:, bcc:, crt:, priority:,
               sensitivity:, replyto
$subject    => the subject string
$body       => the body string
$files      => an array with files


+++Debugoutput helper+++

```
function __sendmail_debugoutput_helper($str, $level)
```

This function tries to echoed all debug information with the SMTP Error: prefix,
with this feature we can capture smtp errors with more details like the error
stored in $mail->ErrorInfo that always contains SMTP connect() failed, the signature
of this function will accomplish the neested callback arguments

- @str   => the debug trace string that can contain the errors
- @level => unused in this function


+++Parser+++

```
function __sendmail_parser($oldaddr)
```

This function gets an address and tries to detect the name part and the addr
part of the argument. It's returns an array with two elements, the first is
for the addr and the second is for the name.

- @oldaddr => the string that must to be processed


+++Message Id+++

```
function __sendmail_messageid($account_id, $from)
```

This function returns the message id for a new email, to do it, tries
to detect the outbox directory, compute an aproximation to the newest
value and checks that is unique in the system to prevent concurrence.

- @account_id => the account id used to send the new email
- @from       => the from used to compute the crc32


+++Eml saver+++

```
function __sendmail_emlsaver($message, $messageid)
```

This function is intended to save the RFC822 message into the eml gzfile

- @message   => the contents in RFC822 format of the message
- @messageid => the message id computed previously


+++Obj saver+++

```
function __sendmail_objsaver($mail, $messageid)
```

This function is intended to save the PHPMailer object into the obj file

- @mail      => the PHPMailer object of the asynchronous transaction
- @messageid => the message id computed previously


+++TODO+++

```
function sendmail_prepare($action, $email_id)
```

TODO


+++TODO+++

```
function sendmail_action($json, $action, $email_id)
```

TODO


+++TODO+++

```
function sendmail_server()
```

TODO


+++TODO+++

```
function sendmail_files($action, $email_id)
```

TODO


+++TODO+++

```
function sendmail_signature($json)
```

TODO


+Invoices+

++invoices application++

```
apps/invoices/js/invoices.js
```

This application implements the tipical features associated to invoices


+++Main object+++

```
saltos.invoices = {};
```

This object contains all SaltOS code


+++TODO+++

```
saltos.invoices.init = arg
```

TODO


+++TODO+++

```
saltos.invoices.compute_total = ()
```

TODO


+++TODO+++

```
saltos.invoices.add_item = ()
```

TODO


+++TODO+++

```
saltos.invoices.remove_item = (obj)
```

TODO


+++TODO+++

```
saltos.invoices.viewpdf = ()
```

TODO


+++TODO+++

```
saltos.invoices.download = ()
```

TODO


+Tester+

++Tester application++

```
apps/tester/js/tester.js
```

This application implements the tipical features associated to tester


+++Tester object+++

```
saltos.tester = {};
```

This object stores all function used by this app


+++Campo 8+++

```
saltos.tester.campo8 = ()
```

TODO


+++Campo 9+++

```
saltos.tester.campo9 = ()
```

TODO


+++Campo 10+++

```
saltos.tester.campo10 = ()
```

TODO


+++Campo 11+++

```
saltos.tester.campo11 = ()
```

TODO


+++Campo 22+++

```
saltos.tester.campo22 = ()
```

TODO


+Users+

++Login application++

```
apps/users/js/login.js
```

This application implements the tipical features associated to login


+++Main object+++

```
saltos.login = {};
```

This object contains all SaltOS code


+++Authenticate login function+++

```
saltos.login.authenticate = async ()
```

This function tries to authenticate the user using the user and pass fields of the form, to do
it uses the authenticate function that send data to the authtoken action


++Days functions++

```
apps/users/php/days.php
```

This file contain all functions needed by the days feature


+++Days to bin+++

```
function days2bin($days)
```

This function tries to convert the days format used by the multiselect
to the string expected by the database formed by ones and zeroes to
represent if a day is operative for the user or not, for example, the
selection 64,32,16,8,4 is returned like from monday to friday (1111100)

- @days => the string containing the days in power of two separated by comma


+++Bin to days+++

```
function bin2days($days)
```

This function tries to do the reverse action that the previous function,
is able to get an string like 1111100 and returns the list of all bits in
decimal like 64,32,16,8,4.

- @days => the string containing the days in binary format


+++Fix for days+++

```
function fix4days($data)
```

This function is intended to be used as wrapper in the result of the query
that contains an element called days, in the database the days is stored
using the binary notation like 1111100, and for the user interface, is needed
to translate this string into a decimal string like 64,32,16,8,4.

- @data => the data obtained from an execute_query, for example, they must contain
         an entry called days.


++Groups functions++

```
apps/users/php/groups.php
```

This file contain all functions needed by the groups app


+++Insert group action+++

```
function insert_group($data)
```

This action allow to insert registers in the database associated to
the groups app and only requires the data.

TODO


+++Update group action+++

```
function update_group($group_id, $data)
```

This action allow to update registers in the database associated to
the groups app and requires the group_id and data.

TODO


+++Delete group action+++

```
function delete_group($group_id)
```

This action allow to delete registers in the database associated to
the groups app and only requires the group_id.

TODO


++Matrix functions++

```
apps/users/php/matrix.php
```

This file contain all functions needed by the excel widget


+++Make matrix+++

```
function make_matrix_data($perms, $apps, $main, $user)
```

TODO


+++Make matrix+++

```
function make_matrix_cell($perms, $apps, $main, $user)
```

TODO


+++Make matrix+++

```
function unmake_matrix_data($perms, $apps, $main, $json)
```

TODO


++Users functions++

```
apps/users/php/users.php
```

This file contain all functions needed by the users app


+++Insert user action+++

```
function insert_user($data)
```

This action allow to insert registers in the database associated to
the users app and only requires the data.

TODO


+++Update user action+++

```
function update_user($user_id, $data)
```

This action allow to update registers in the database associated to
the users app and requires the user_id and data.

TODO


+++Delete user action+++

```
function delete_user($user_id)
```

This action allow to delete registers in the database associated to
the users app and only requires the user_id.

TODO


