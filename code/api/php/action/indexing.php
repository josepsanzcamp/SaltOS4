<?php

/**
 *  ____        _ _    ___  ____    _  _    ___
 * / ___|  __ _| | |_ / _ \/ ___|  | || |  / _ \
 * \___ \ / _` | | __| | | \___ \  | || |_| | | |
 *  ___) | (_| | | |_| |_| |___) | |__   _| |_| |
 * |____/ \__,_|_|\__|\___/|____/     |_|(_)___/
 *
 * SaltOS: Framework to develop Rich Internet Applications
 * Copyright (C) 2007-2024 by Josep Sanz CampderrÃ³s
 * More information in https://www.saltos.org or info@saltos.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

/**
 * Make indexing action
 *
 * This fie contains useful functions related to the indexing action that internally uses the
 * mroonga engine to search in the fulltext string generated by this action
 */

if (get_data('server/request_method') != 'CLI') {
    show_php_error(['phperror' => 'Permission denied']);
}

if (!semaphore_acquire('indexing')) {
    show_php_error(['phperror' => 'Could not acquire the semaphore']);
}

db_connect();
require_once 'php/lib/unoconv.php';
require_once 'php/lib/indexing.php';
$time1 = microtime(true);
$output = ['total' => 0];

$query = "SELECT id,code,`table` FROM tbl_apps WHERE `table`!=''";
$apps = execute_query_array($query);

// First part: indexing files
foreach ($apps as $app) {
    if (time_get_usage() > get_config('server/percentstop')) {
        break;
    }
    $table = $app['table'];
    // Check if files exists
    $query = "SELECT id FROM {$table}_files LIMIT 1";
    if (!db_check($query)) {
        continue;
    }
    // Search all pending files
    $query = "SELECT id,reg_id,file FROM {$table}_files
        WHERE indexed=0 AND retries<3 AND file!='' LIMIT 1000";
    $result = db_query($query);
    while ($row = db_fetch_row($result)) {
        if (time_get_usage() > get_config('server/percentstop')) {
            break;
        }
        // Check if exists
        $query = "SELECT id FROM {$table}_files WHERE id = ?";
        $exists = execute_query($query, [$row['id']]);
        if (!$exists) {
            continue;
        }
        // Continue
        $query = "UPDATE {$table}_files SET retries = retries + 1 WHERE id = ?";
        db_query($query, [$row['id']]);
        $input = get_directory('dirs/filesdir') . $app['code'] . '/' . $row['file'];
        $search = unoconv2txt($input);
        $query = prepare_update_query("{$table}_files", [
            'indexed' => 1,
            'search' => $search,
        ], [
            'id' => $row['id'],
        ]);
        db_query(...$query);
        make_index($app['code'], $row['reg_id']);
        $output['total']++;
    }
    db_free($result);
}

// Second part: indexing apps contents
foreach ($apps as $app) {
    if (time_get_usage() > get_config('server/percentstop')) {
        break;
    }
    $table = $app['table'];
    // Check if index exists
    $query = "SELECT id FROM {$table}_index LIMIT 1";
    if (!db_check($query)) {
        continue;
    }
    $range = execute_query("SELECT MAX(id) maxim, MIN(id) minim FROM {$table}");
    for ($i = $range['minim']; $i < $range['maxim']; $i += 100000) {
        if (time_get_usage() > get_config('server/percentstop')) {
            break;
        }
        for (;;) {
            if (time_get_usage() > get_config('server/percentstop')) {
                break;
            }
            // Search ids of the main application table, that doesn't exists on the
            // partial indexing table
            $query = "SELECT a.id FROM {$table} a
                LEFT JOIN {$table}_index b ON a.id = b.id
                WHERE b.id IS NULL AND a.id >= ? AND a.id < ? + 100000 LIMIT 1000";
            $ids = execute_query_array($query, [$i, $i]);
            if (!count($ids)) {
                break;
            }
            foreach ($ids as $id) {
                make_index($app['code'], $id);
            }
            $output['total'] += count($ids);
            if (count($ids) < 1000) {
                break;
            }
        }
    }
    $range = execute_query("SELECT MAX(id) maxim, MIN(id) minim FROM {$table}_index");
    for ($i = $range['minim']; $i < $range['maxim']; $i += 100000) {
        if (time_get_usage() > get_config('server/percentstop')) {
            break;
        }
        for (;;) {
            if (time_get_usage() > get_config('server/percentstop')) {
                break;
            }
            // Search ids of the partial indexing table, that doesn't exists on the
            // main application table
            $query = "SELECT a.id FROM {$table}_index a
                LEFT JOIN {$table} b ON b.id = a.id
                WHERE b.id IS NULL AND a.id >= ? AND a.id < ? + 100000 LIMIT 1000";
            $ids = execute_query_array($query, [$i, $i]);
            if (!count($ids)) {
                break;
            }
            foreach ($ids as $id) {
                make_index($app['code'], $id);
            }
            $output['total'] += count($ids);
            if (count($ids) < 1000) {
                break;
            }
        }
    }
}

$time2 = microtime(true);
semaphore_release('indexing');
output_handler_json([
    'indexing' => array_merge([
        'time' => round($time2 - $time1, 6),
    ], $output),
]);
