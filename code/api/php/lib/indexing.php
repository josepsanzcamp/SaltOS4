<?php

/**
 *  ____        _ _    ___  ____    _  _    ___
 * / ___|  __ _| | |_ / _ \/ ___|  | || |  / _ \
 * \___ \ / _` | | __| | | \___ \  | || |_| | | |
 *  ___) | (_| | | |_| |_| |___) | |__   _| |_| |
 * |____/ \__,_|_|\__|\___/|____/     |_|(_)___/
 *
 * SaltOS: Framework to develop Rich Internet Applications
 * Copyright (C) 2007-2024 by Josep Sanz CampderrÃ³s
 * More information in https://www.saltos.org or info@saltos.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

/**
 * Make index helper module
 *
 * This fie contains useful functions related to the indexing feature that internally uses the
 * mroonga engine to search in the fulltext string generated by this feature
 */

/**
 * Make Index main function
 *
 * This function implements the make index feature of SaltOS, this consists
 * in a concatenation of fields and subqueries to retrieve all data related to
 * the tables involved in the desired application and the register reg_id
 *
 * @app    => code of the application that you want to index
 * @reg_id => register of the app that you want to index
 *
 * Notes:
 *
 * This function returns an integer as response about the index action:
 *
 * +1 => insert executed, this is because the app register exists and the index register not exists
 * +2 => update executed, this is because the app register exists and the index register too exists
 * +3 => delete executed, this is because the app register not exists and the index register exists
 * -1 => app not found, this is because the app requested not have a table in the apps config
 * -2 => index table not found, this is because the has_index feature is disabled by dbstatic
 * -3 => data not found, this is because the app register not exists and the indexting register too not exists
 *
 * As you can see, negative values denotes an error and positive values denotes a successfully situation
 */
function make_index($app, $reg_id)
{
    // Check the passed parameters
    $table = app2table($app);
    if ($table == '') {
        return -1;
    }
    // Check if index exists
    $query = "SELECT id FROM {$table}_index LIMIT 1";
    if (!db_check($query)) {
        return -2;
    }
    $query = "SELECT id FROM {$table}_index WHERE id='$reg_id'";
    $index_id = execute_query($query);
    // Check if exists data in the main table
    $query = "SELECT id FROM $table WHERE id='$reg_id'";
    $data_id = execute_query($query);
    if (!$data_id) {
        if ($index_id) {
            $query = "DELETE FROM {$table}_index WHERE id='$reg_id'";
            db_query($query);
            return 3;
        } else {
            return -3;
        }
    }
    // Continue the process after the checks
    $queries = [];
    // This part allow to get all data of the all fields from the main table
    $fields = __make_index_helper($table, $reg_id);
    foreach ($fields as $key => $val) {
        $val = escape_reserved_word($val);
        $fields[$key] = "IFNULL(($val),'')";
    }
    $fields = 'CONCAT(' . implode(",' ',", $fields) . ')';
    $query = "SELECT $fields FROM $table WHERE id='$reg_id'";
    $queries[] = $query;
    // This part allow to get all data of the all fields from the subtables
    $subtables = app2subtables($app);
    foreach ($subtables as $temp) {
        $subtable = $temp['subtable'];
        $field = $temp['field'];
        $fields = __make_index_helper($subtable);
        foreach ($fields as $key => $val) {
            $val = escape_reserved_word($val);
            $fields[$key] = "IFNULL(($val),'')";
        }
        $fields = 'GROUP_CONCAT(CONCAT(' . implode(",' ',", $fields) . '))';
        $query = "SELECT $fields FROM $subtable WHERE $field='$reg_id'";
        $queries[] = $query;
    }
    // This part allow to get all data of the all fields from files and notes
    $subtables = ["{$table}_files", "{$table}_notes"];
    foreach ($subtables as $subtable) {
        $query = "SELECT id FROM $subtable LIMIT 1";
        if (!db_check($query)) {
            continue;
        }
        $fields = __make_index_helper($subtable);
        foreach ($fields as $key => $val) {
            $val = escape_reserved_word($val);
            $fields[$key] = "IFNULL(($val),'')";
        }
        $fields = 'GROUP_CONCAT(CONCAT(' . implode(",' ',", $fields) . '))';
        $query = "SELECT $fields FROM $subtable WHERE reg_id='$reg_id'";
        $queries[] = $query;
    }
    // Prepare the main query
    foreach ($queries as $key => $val) {
        $queries[$key] = "IFNULL(($val),'')";
    }
    $search = 'CONCAT(' . implode(",' ',", $queries) . ')';
    // Do the insert or update action to the index table
    if (!$index_id) {
        $query = "INSERT INTO {$table}_index(id,search) VALUES($reg_id,$search)";
        db_query($query);
        return 1;
    } else {
        $query = "UPDATE {$table}_index SET search=$search WHERE id=$reg_id";
        db_query($query);
        return 2;
    }
}

/**
 * Make Index helper
 *
 * This function allow the make_index to retrieve all data of the fiels
 * and all data of the related fields of the related tables, this is done
 * by using the fkey information of the dbschema, this function uses some
 * features of the dbschema functions to get the fields, types, fkeys and
 * too, the dbstatic information of the app table
 *
 * This function uses a cache technique to improve the performance, returns
 * an array with all fields and subqueries to allow to retrieve all data
 * related to the app register
 */
function __make_index_helper($table, $id = '')
{
    static $cache = [];
    $hash = $table . '|' . $id;
    if (isset($cache[$hash])) {
        return $cache[$hash];
    }
    $fieldnames = array_column(get_fields($table), 'name');
    $fieldnames = escape_reserved_word($fieldnames);
    $result = $fieldnames;
    $tablefield = __get_field_helper($table);
    if ($tablefield != '') {
        $result[] = $tablefield;
    }
    $fieldfkeys = __get_fkeys_helper($table);
    foreach ($fieldfkeys as $key => $val) {
        $temp = __get_field_helper($val);
        if ($temp == '') {
            $temp = array_column(get_fields($val), 'name');
            $temp = escape_reserved_word($temp);
            $temp = implode(",' ',", $temp);
            if ($temp != '') {
                $temp = "CONCAT($temp)";
            }
        }
        $field = $temp;
        $type = get_field_type(array_column(get_fields($table), 'type', 'name')[$key]);
        if ($type == 'int') {
            if ($id == '') {
                $where = "$val.id=$key";
            } else {
                $where = "$val.id=(SELECT $key FROM $table WHERE id=$id)";
            }
        } elseif ($type == 'string') {
            if ($id == '') {
                $where = "FIND_IN_SET($val.id,$key)";
            } else {
                $where = "FIND_IN_SET($val.id,(SELECT $key FROM $table WHERE id=$id))";
            }
            $field = "GROUP_CONCAT($field)";
        } else {
            // @codeCoverageIgnoreStart
            show_php_error(['phperror' => "Unknown type '$type'"]);
            // @codeCoverageIgnoreEnd
        }
        if ($field != '' && $where != '') {
            $result[] = "(SELECT $field FROM $val WHERE $where)";
        }
    }
    $cache[$hash] = $result;
    return $result;
}

/**
 * Get Field helper
 *
 * This function return the field associated to the table in the dbstatic
 * file and associated to the apps table
 *
 * @table => the table of the dbstatic that want to convert to field
 *
 * Notes:
 *
 * This function uses the dbschema.php library
 */
function __get_field_helper($table)
{
    require_once 'php/lib/dbschema.php';
    return get_field_from_dbstatic($table);
}

/**
 * Get Fkeys helper
 *
 * This function returns the fkeys from the DB Schema file
 *
 * @table => the table that you want to request the fkeys
 *
 * Notes:
 *
 * This function uses the dbschema.php library
 */
function __get_fkeys_helper($table)
{
    require_once 'php/lib/dbschema.php';
    return get_fkeys_from_dbschema($table);
}
