<?php

/**
 *  ____        _ _    ___  ____    _  _    ___
 * / ___|  __ _| | |_ / _ \/ ___|  | || |  / _ \
 * \___ \ / _` | | __| | | \___ \  | || |_| | | |
 *  ___) | (_| | | |_| |_| |___) | |__   _| |_| |
 * |____/ \__,_|_|\__|\___/|____/     |_|(_)___/
 *
 * SaltOS: Framework to develop Rich Internet Applications
 * Copyright (C) 2007-2024 by Josep Sanz CampderrÃ³s
 * More information in https://www.saltos.org or info@saltos.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

/**
 * Make indexing action
 *
 * This fie contains useful functions related to the indexing action that internally uses the
 * mroonga engine to search in the fulltext string generated by this action
 */

if (!get_data('server/xuid')) {
    show_php_error(['phperror' => 'Permission denied']);
}

if (!semaphore_acquire('app/emails/indexing')) {
    show_php_error(['phperror' => 'Could not acquire the semaphore']);
}

require_once __ROOT__ . 'apps/emails/php/getmail.php';
require_once __ROOT__ . 'php/lib/unoconv.php';
require_once __ROOT__ . 'php/lib/indexing.php';
$time1 = microtime(true);
$total = 0;

// Search all pending files
$query = 'SELECT id, reg_id, hash FROM app_emails_files WHERE indexed = 0 AND retries < 3 LIMIT 1000';
$result = db_query($query);
while ($row = db_fetch_row($result)) {
    if (time_get_usage() > get_config('server/percentstop')) {
        break;
    }
    // Check if exists
    $query = 'SELECT id FROM app_emails_files WHERE id = ?';
    $exists = execute_query($query, [$row['id']]);
    if (!$exists) {
        continue;
    }
    // Continue
    $query = 'UPDATE app_emails_files SET retries = retries + 1 WHERE id = ?';
    db_query($query, [$row['id']]);
    // Prepare the input file
    $decoded = __getmail_getmime($row['reg_id']);
    if (!$decoded) {
        addtrace([
            'phperror' => 'Email not found',
            'details' => sprintr($row),
        ], get_config('debug/warningfile') ?? 'warning.log');
        $query = prepare_update_query('app_emails_files', [
            'retries' => '3',
        ], [
            'id' => $row['id'],
        ]);
        db_query(...$query);
        continue;
    }
    $file = __getmail_getcid(__getmail_getnode('0', $decoded), $row['hash']);
    if (!$file) {
        addtrace([
            'phperror' => 'Attachment not found',
            'details' => sprintr($row),
        ], get_config('debug/warningfile') ?? 'warning.log');
        $query = prepare_update_query('app_emails_files', [
            'retries' => '3',
        ], [
            'id' => $row['id'],
        ]);
        db_query(...$query);
        continue;
    }
    $ext = strtolower(extension($file['cname']));
    if (!$ext) {
        $ext = strtolower(saltos_content_type1($file['ctype']));
    }
    $input = get_cache_file($row['hash'], $ext);
    file_put_contents($input, $file['body']);
    // Do the real indexing
    $search = unoconv2txt($input);
    $query = prepare_update_query('app_emails_files', [
        'indexed' => 1,
        'search' => $search,
    ], [
        'id' => $row['id'],
    ]);
    db_query(...$query);
    make_index('emails', $row['reg_id']);
    $total++;
}
db_free($result);

$time2 = microtime(true);
semaphore_release('app/emails/indexing');
output_handler_json([
    'indexing' => [
        'time' => round($time2 - $time1, 6),
        'total' => $total,
    ],
]);
